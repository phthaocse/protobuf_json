// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.27.3
// source: encoding_test.proto

package protobuf_json

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TestVarInt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Number int32  `protobuf:"zigzag32,2,opt,name=number,proto3" json:"number,omitempty"`
	Str    string `protobuf:"bytes,3,opt,name=str,proto3" json:"str,omitempty"`
	Str2   string `protobuf:"bytes,4,opt,name=str2,proto3" json:"str2,omitempty"`
}

func (x *TestVarInt) Reset() {
	*x = TestVarInt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encoding_test_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestVarInt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestVarInt) ProtoMessage() {}

func (x *TestVarInt) ProtoReflect() protoreflect.Message {
	mi := &file_encoding_test_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestVarInt.ProtoReflect.Descriptor instead.
func (*TestVarInt) Descriptor() ([]byte, []int) {
	return file_encoding_test_proto_rawDescGZIP(), []int{0}
}

func (x *TestVarInt) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TestVarInt) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *TestVarInt) GetStr() string {
	if x != nil {
		return x.Str
	}
	return ""
}

func (x *TestVarInt) GetStr2() string {
	if x != nil {
		return x.Str2
	}
	return ""
}

type Location struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lat        float64 `protobuf:"fixed64,1,opt,name=lat,proto3" json:"lat,omitempty"`
	Long       float64 `protobuf:"fixed64,2,opt,name=long,proto3" json:"long,omitempty"`
	CellCode   string  `protobuf:"bytes,3,opt,name=cell_code,json=cellCode,proto3" json:"cell_code,omitempty"`
	PlaceId    string  `protobuf:"bytes,4,opt,name=place_id,json=placeId,proto3" json:"place_id,omitempty"`
	TrustLevel int32   `protobuf:"varint,5,opt,name=trust_level,json=trustLevel,proto3" json:"trust_level,omitempty"`
	Wardcode   string  `protobuf:"bytes,6,opt,name=wardcode,proto3" json:"wardcode,omitempty"`
}

func (x *Location) Reset() {
	*x = Location{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encoding_test_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Location) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Location) ProtoMessage() {}

func (x *Location) ProtoReflect() protoreflect.Message {
	mi := &file_encoding_test_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Location.ProtoReflect.Descriptor instead.
func (*Location) Descriptor() ([]byte, []int) {
	return file_encoding_test_proto_rawDescGZIP(), []int{1}
}

func (x *Location) GetLat() float64 {
	if x != nil {
		return x.Lat
	}
	return 0
}

func (x *Location) GetLong() float64 {
	if x != nil {
		return x.Long
	}
	return 0
}

func (x *Location) GetCellCode() string {
	if x != nil {
		return x.CellCode
	}
	return ""
}

func (x *Location) GetPlaceId() string {
	if x != nil {
		return x.PlaceId
	}
	return ""
}

func (x *Location) GetTrustLevel() int32 {
	if x != nil {
		return x.TrustLevel
	}
	return 0
}

func (x *Location) GetWardcode() string {
	if x != nil {
		return x.Wardcode
	}
	return ""
}

type Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name           string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Code           string   `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	Quantity       int32    `protobuf:"varint,3,opt,name=quantity,proto3" json:"quantity,omitempty"`
	Price          int32    `protobuf:"varint,4,opt,name=price,proto3" json:"price,omitempty"`
	Length         int32    `protobuf:"varint,5,opt,name=length,proto3" json:"length,omitempty"`
	Width          int32    `protobuf:"varint,6,opt,name=width,proto3" json:"width,omitempty"`
	Height         int32    `protobuf:"varint,7,opt,name=height,proto3" json:"height,omitempty"`
	CategoryLevel1 string   `protobuf:"bytes,8,opt,name=category_level1,json=categoryLevel1,proto3" json:"category_level1,omitempty"`
	CategoryLevel2 string   `protobuf:"bytes,9,opt,name=category_level2,json=categoryLevel2,proto3" json:"category_level2,omitempty"`
	CategoryLevel3 string   `protobuf:"bytes,10,opt,name=category_level3,json=categoryLevel3,proto3" json:"category_level3,omitempty"`
	Weight         int32    `protobuf:"varint,11,opt,name=weight,proto3" json:"weight,omitempty"`
	ImageIds       []string `protobuf:"bytes,12,rep,name=image_ids,json=imageIds,proto3" json:"image_ids,omitempty"`
	Status         string   `protobuf:"bytes,13,opt,name=status,proto3" json:"status,omitempty"`
	ItemOrderCode  string   `protobuf:"bytes,14,opt,name=item_order_code,json=itemOrderCode,proto3" json:"item_order_code,omitempty"`
}

func (x *Item) Reset() {
	*x = Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encoding_test_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Item) ProtoMessage() {}

func (x *Item) ProtoReflect() protoreflect.Message {
	mi := &file_encoding_test_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Item.ProtoReflect.Descriptor instead.
func (*Item) Descriptor() ([]byte, []int) {
	return file_encoding_test_proto_rawDescGZIP(), []int{2}
}

func (x *Item) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Item) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Item) GetQuantity() int32 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *Item) GetPrice() int32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Item) GetLength() int32 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *Item) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *Item) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *Item) GetCategoryLevel1() string {
	if x != nil {
		return x.CategoryLevel1
	}
	return ""
}

func (x *Item) GetCategoryLevel2() string {
	if x != nil {
		return x.CategoryLevel2
	}
	return ""
}

func (x *Item) GetCategoryLevel3() string {
	if x != nil {
		return x.CategoryLevel3
	}
	return ""
}

func (x *Item) GetWeight() int32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *Item) GetImageIds() []string {
	if x != nil {
		return x.ImageIds
	}
	return nil
}

func (x *Item) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Item) GetItemOrderCode() string {
	if x != nil {
		return x.ItemOrderCode
	}
	return ""
}

type ExtraService struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocumentReturnFlag bool `protobuf:"varint,1,opt,name=document_return_flag,json=documentReturnFlag,proto3" json:"document_return_flag,omitempty"`
	DoubleCheck        bool `protobuf:"varint,2,opt,name=double_check,json=doubleCheck,proto3" json:"double_check,omitempty"`
}

func (x *ExtraService) Reset() {
	*x = ExtraService{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encoding_test_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtraService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtraService) ProtoMessage() {}

func (x *ExtraService) ProtoReflect() protoreflect.Message {
	mi := &file_encoding_test_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtraService.ProtoReflect.Descriptor instead.
func (*ExtraService) Descriptor() ([]byte, []int) {
	return file_encoding_test_proto_rawDescGZIP(), []int{3}
}

func (x *ExtraService) GetDocumentReturnFlag() bool {
	if x != nil {
		return x.DocumentReturnFlag
	}
	return false
}

func (x *ExtraService) GetDoubleCheck() bool {
	if x != nil {
		return x.DoubleCheck
	}
	return false
}

type Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AhamoveSellerAddressDetail    string `protobuf:"bytes,1,opt,name=ahamove_seller_address_detail,json=ahamoveSellerAddressDetail,proto3" json:"ahamove_seller_address_detail,omitempty"`
	AhamoveRecipientAddressDetail string `protobuf:"bytes,2,opt,name=ahamove_recipient_address_detail,json=ahamoveRecipientAddressDetail,proto3" json:"ahamove_recipient_address_detail,omitempty"`
	ProvinceId                    int32  `protobuf:"varint,3,opt,name=province_id,json=provinceId,proto3" json:"province_id,omitempty"`
	AhamoveOrderCode              string `protobuf:"bytes,4,opt,name=ahamove_order_code,json=ahamoveOrderCode,proto3" json:"ahamove_order_code,omitempty"`
}

func (x *Data) Reset() {
	*x = Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encoding_test_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Data) ProtoMessage() {}

func (x *Data) ProtoReflect() protoreflect.Message {
	mi := &file_encoding_test_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Data.ProtoReflect.Descriptor instead.
func (*Data) Descriptor() ([]byte, []int) {
	return file_encoding_test_proto_rawDescGZIP(), []int{4}
}

func (x *Data) GetAhamoveSellerAddressDetail() string {
	if x != nil {
		return x.AhamoveSellerAddressDetail
	}
	return ""
}

func (x *Data) GetAhamoveRecipientAddressDetail() string {
	if x != nil {
		return x.AhamoveRecipientAddressDetail
	}
	return ""
}

func (x *Data) GetProvinceId() int32 {
	if x != nil {
		return x.ProvinceId
	}
	return 0
}

func (x *Data) GetAhamoveOrderCode() string {
	if x != nil {
		return x.AhamoveOrderCode
	}
	return ""
}

type ShippingOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId                         string        `protobuf:"bytes,1,opt,name=_id,json=Id,proto3" json:"_id,omitempty"`
	ShopId                      int32         `protobuf:"varint,2,opt,name=shop_id,json=shopId,proto3" json:"shop_id,omitempty"`
	ClientId                    int32         `protobuf:"varint,3,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	ReturnName                  string        `protobuf:"bytes,4,opt,name=return_name,json=returnName,proto3" json:"return_name,omitempty"`
	ReturnPhone                 string        `protobuf:"bytes,5,opt,name=return_phone,json=returnPhone,proto3" json:"return_phone,omitempty"`
	ReturnAddress               string        `protobuf:"bytes,6,opt,name=return_address,json=returnAddress,proto3" json:"return_address,omitempty"`
	ReturnWardCode              string        `protobuf:"bytes,7,opt,name=return_ward_code,json=returnWardCode,proto3" json:"return_ward_code,omitempty"`
	ReturnDistrictId            int32         `protobuf:"varint,8,opt,name=return_district_id,json=returnDistrictId,proto3" json:"return_district_id,omitempty"`
	ReturnLocation              *Location     `protobuf:"bytes,9,opt,name=return_location,json=returnLocation,proto3" json:"return_location,omitempty"`
	FromName                    string        `protobuf:"bytes,10,opt,name=from_name,json=fromName,proto3" json:"from_name,omitempty"`
	FromPhone                   string        `protobuf:"bytes,11,opt,name=from_phone,json=fromPhone,proto3" json:"from_phone,omitempty"`
	FromHotline                 string        `protobuf:"bytes,12,opt,name=from_hotline,json=fromHotline,proto3" json:"from_hotline,omitempty"`
	FromAddress                 string        `protobuf:"bytes,13,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty"`
	FromWardCode                string        `protobuf:"bytes,14,opt,name=from_ward_code,json=fromWardCode,proto3" json:"from_ward_code,omitempty"`
	FromDistrictId              int32         `protobuf:"varint,15,opt,name=from_district_id,json=fromDistrictId,proto3" json:"from_district_id,omitempty"`
	FromLocation                *Location     `protobuf:"bytes,16,opt,name=from_location,json=fromLocation,proto3" json:"from_location,omitempty"`
	DeliverStationId            int32         `protobuf:"varint,17,opt,name=deliver_station_id,json=deliverStationId,proto3" json:"deliver_station_id,omitempty"`
	ToName                      string        `protobuf:"bytes,18,opt,name=to_name,json=toName,proto3" json:"to_name,omitempty"`
	ToPhone                     string        `protobuf:"bytes,19,opt,name=to_phone,json=toPhone,proto3" json:"to_phone,omitempty"`
	ToAddress                   string        `protobuf:"bytes,20,opt,name=to_address,json=toAddress,proto3" json:"to_address,omitempty"`
	ToWardCode                  string        `protobuf:"bytes,21,opt,name=to_ward_code,json=toWardCode,proto3" json:"to_ward_code,omitempty"`
	ToDistrictId                int32         `protobuf:"varint,22,opt,name=to_district_id,json=toDistrictId,proto3" json:"to_district_id,omitempty"`
	ToLocation                  *Location     `protobuf:"bytes,23,opt,name=to_location,json=toLocation,proto3" json:"to_location,omitempty"`
	Weight                      int32         `protobuf:"varint,24,opt,name=weight,proto3" json:"weight,omitempty"`
	Length                      int32         `protobuf:"varint,25,opt,name=length,proto3" json:"length,omitempty"`
	Width                       int32         `protobuf:"varint,26,opt,name=width,proto3" json:"width,omitempty"`
	Height                      int32         `protobuf:"varint,27,opt,name=height,proto3" json:"height,omitempty"`
	ConvertedWeight             int32         `protobuf:"varint,28,opt,name=converted_weight,json=convertedWeight,proto3" json:"converted_weight,omitempty"`
	CalculateWeight             int32         `protobuf:"varint,29,opt,name=calculate_weight,json=calculateWeight,proto3" json:"calculate_weight,omitempty"`
	ImageIds                    string        `protobuf:"bytes,30,opt,name=image_ids,json=imageIds,proto3" json:"image_ids,omitempty"`
	ServiceTypeId               int32         `protobuf:"varint,31,opt,name=service_type_id,json=serviceTypeId,proto3" json:"service_type_id,omitempty"`
	ServiceId                   int32         `protobuf:"varint,32,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	PaymentTypeId               int32         `protobuf:"varint,33,opt,name=payment_type_id,json=paymentTypeId,proto3" json:"payment_type_id,omitempty"`
	PaymentTypeIds              []int32       `protobuf:"varint,34,rep,packed,name=payment_type_ids,json=paymentTypeIds,proto3" json:"payment_type_ids,omitempty"`
	CustomServiceFee            int32         `protobuf:"varint,35,opt,name=custom_service_fee,json=customServiceFee,proto3" json:"custom_service_fee,omitempty"`
	SortCode                    string        `protobuf:"bytes,36,opt,name=sort_code,json=sortCode,proto3" json:"sort_code,omitempty"`
	CodAmount                   int32         `protobuf:"varint,37,opt,name=cod_amount,json=codAmount,proto3" json:"cod_amount,omitempty"`
	IsCodTransferred            bool          `protobuf:"varint,38,opt,name=is_cod_transferred,json=isCodTransferred,proto3" json:"is_cod_transferred,omitempty"`
	IsCodCollected              bool          `protobuf:"varint,39,opt,name=is_cod_collected,json=isCodCollected,proto3" json:"is_cod_collected,omitempty"`
	InsuranceValue              int32         `protobuf:"varint,40,opt,name=insurance_value,json=insuranceValue,proto3" json:"insurance_value,omitempty"`
	OrderValue                  int32         `protobuf:"varint,41,opt,name=order_value,json=orderValue,proto3" json:"order_value,omitempty"`
	PickStationId               int32         `protobuf:"varint,42,opt,name=pick_station_id,json=pickStationId,proto3" json:"pick_station_id,omitempty"`
	ClientOrderCode             string        `protobuf:"bytes,43,opt,name=client_order_code,json=clientOrderCode,proto3" json:"client_order_code,omitempty"`
	CodFailedAmount             int32         `protobuf:"varint,44,opt,name=cod_failed_amount,json=codFailedAmount,proto3" json:"cod_failed_amount,omitempty"`
	CodFailedCollectDate        string        `protobuf:"bytes,45,opt,name=cod_failed_collect_date,json=codFailedCollectDate,proto3" json:"cod_failed_collect_date,omitempty"`
	RequiredNote                string        `protobuf:"bytes,46,opt,name=required_note,json=requiredNote,proto3" json:"required_note,omitempty"`
	Content                     string        `protobuf:"bytes,47,opt,name=content,proto3" json:"content,omitempty"`
	Note                        string        `protobuf:"bytes,48,opt,name=note,proto3" json:"note,omitempty"`
	EmployeeNote                string        `protobuf:"bytes,49,opt,name=employee_note,json=employeeNote,proto3" json:"employee_note,omitempty"`
	SealCode                    string        `protobuf:"bytes,50,opt,name=seal_code,json=sealCode,proto3" json:"seal_code,omitempty"`
	PickupTime                  string        `protobuf:"bytes,51,opt,name=pickup_time,json=pickupTime,proto3" json:"pickup_time,omitempty"`
	Items                       []*Item       `protobuf:"bytes,52,rep,name=items,proto3" json:"items,omitempty"`
	Coupon                      string        `protobuf:"bytes,53,opt,name=coupon,proto3" json:"coupon,omitempty"`
	CouponCampaignId            int32         `protobuf:"varint,54,opt,name=coupon_campaign_id,json=couponCampaignId,proto3" json:"coupon_campaign_id,omitempty"`
	OrderCode                   string        `protobuf:"bytes,55,opt,name=order_code,json=orderCode,proto3" json:"order_code,omitempty"`
	VersionNo                   string        `protobuf:"bytes,56,opt,name=version_no,json=versionNo,proto3" json:"version_no,omitempty"`
	UpdatedIp                   string        `protobuf:"bytes,57,opt,name=updated_ip,json=updatedIp,proto3" json:"updated_ip,omitempty"`
	UpdatedEmployee             int32         `protobuf:"varint,58,opt,name=updated_employee,json=updatedEmployee,proto3" json:"updated_employee,omitempty"`
	UpdatedClient               int32         `protobuf:"varint,59,opt,name=updated_client,json=updatedClient,proto3" json:"updated_client,omitempty"`
	UpdatedSource               string        `protobuf:"bytes,60,opt,name=updated_source,json=updatedSource,proto3" json:"updated_source,omitempty"`
	UpdatedDate                 string        `protobuf:"bytes,61,opt,name=updated_date,json=updatedDate,proto3" json:"updated_date,omitempty"`
	UpdatedWarehouse            int32         `protobuf:"varint,62,opt,name=updated_warehouse,json=updatedWarehouse,proto3" json:"updated_warehouse,omitempty"`
	CreatedIp                   string        `protobuf:"bytes,63,opt,name=created_ip,json=createdIp,proto3" json:"created_ip,omitempty"`
	CreatedEmployee             int32         `protobuf:"varint,64,opt,name=created_employee,json=createdEmployee,proto3" json:"created_employee,omitempty"`
	CreatedClient               int32         `protobuf:"varint,65,opt,name=created_client,json=createdClient,proto3" json:"created_client,omitempty"`
	CreatedSource               string        `protobuf:"bytes,66,opt,name=created_source,json=createdSource,proto3" json:"created_source,omitempty"`
	CreatedDate                 string        `protobuf:"bytes,67,opt,name=created_date,json=createdDate,proto3" json:"created_date,omitempty"`
	Status                      string        `protobuf:"bytes,68,opt,name=status,proto3" json:"status,omitempty"`
	InternalProcessStatus       string        `protobuf:"bytes,69,opt,name=internal_process_status,json=internalProcessStatus,proto3" json:"internal_process_status,omitempty"`
	InternalProcessType         string        `protobuf:"bytes,70,opt,name=internal_process_type,json=internalProcessType,proto3" json:"internal_process_type,omitempty"`
	PickWarehouseId             int32         `protobuf:"varint,71,opt,name=pick_warehouse_id,json=pickWarehouseId,proto3" json:"pick_warehouse_id,omitempty"`
	DeliverWarehouseId          int32         `protobuf:"varint,72,opt,name=deliver_warehouse_id,json=deliverWarehouseId,proto3" json:"deliver_warehouse_id,omitempty"`
	CurrentWarehouseId          int32         `protobuf:"varint,73,opt,name=current_warehouse_id,json=currentWarehouseId,proto3" json:"current_warehouse_id,omitempty"`
	ReturnWarehouseId           int32         `protobuf:"varint,74,opt,name=return_warehouse_id,json=returnWarehouseId,proto3" json:"return_warehouse_id,omitempty"`
	NextWarehouseId             int32         `protobuf:"varint,75,opt,name=next_warehouse_id,json=nextWarehouseId,proto3" json:"next_warehouse_id,omitempty"`
	CurrentTransportWarehouseId int32         `protobuf:"varint,76,opt,name=current_transport_warehouse_id,json=currentTransportWarehouseId,proto3" json:"current_transport_warehouse_id,omitempty"`
	Leadtime                    string        `protobuf:"bytes,77,opt,name=leadtime,proto3" json:"leadtime,omitempty"`
	OrderDate                   string        `protobuf:"bytes,78,opt,name=order_date,json=orderDate,proto3" json:"order_date,omitempty"`
	Data                        *Data         `protobuf:"bytes,79,opt,name=data,proto3" json:"data,omitempty"`
	Action                      string        `protobuf:"bytes,80,opt,name=action,proto3" json:"action,omitempty"`
	SocId                       string        `protobuf:"bytes,81,opt,name=soc_id,json=socId,proto3" json:"soc_id,omitempty"`
	Tag                         []string      `protobuf:"bytes,82,rep,name=tag,proto3" json:"tag,omitempty"`
	Legacy                      bool          `protobuf:"varint,83,opt,name=legacy,proto3" json:"legacy,omitempty"`
	IsPartialReturn             bool          `protobuf:"varint,84,opt,name=is_partial_return,json=isPartialReturn,proto3" json:"is_partial_return,omitempty"`
	IsDocumentReturn            bool          `protobuf:"varint,85,opt,name=is_document_return,json=isDocumentReturn,proto3" json:"is_document_return,omitempty"`
	UpdatedDatePickShift        string        `protobuf:"bytes,86,opt,name=updated_date_pick_shift,json=updatedDatePickShift,proto3" json:"updated_date_pick_shift,omitempty"`
	UpdatedDateDeliverShift     string        `protobuf:"bytes,87,opt,name=updated_date_deliver_shift,json=updatedDateDeliverShift,proto3" json:"updated_date_deliver_shift,omitempty"`
	UpdatedDateReturnShift      string        `protobuf:"bytes,88,opt,name=updated_date_return_shift,json=updatedDateReturnShift,proto3" json:"updated_date_return_shift,omitempty"`
	TransactionIds              []string      `protobuf:"bytes,89,rep,name=transaction_ids,json=transactionIds,proto3" json:"transaction_ids,omitempty"`
	TransportationStatus        string        `protobuf:"bytes,90,opt,name=transportation_status,json=transportationStatus,proto3" json:"transportation_status,omitempty"`
	TransportationPhase         string        `protobuf:"bytes,91,opt,name=transportation_phase,json=transportationPhase,proto3" json:"transportation_phase,omitempty"`
	ExtraService                *ExtraService `protobuf:"bytes,92,opt,name=extra_service,json=extraService,proto3" json:"extra_service,omitempty"`
	ConfigFeeId                 string        `protobuf:"bytes,93,opt,name=config_fee_id,json=configFeeId,proto3" json:"config_fee_id,omitempty"`
	ExtraCostId                 string        `protobuf:"bytes,94,opt,name=extra_cost_id,json=extraCostId,proto3" json:"extra_cost_id,omitempty"`
	StandardConfigFeeId         string        `protobuf:"bytes,95,opt,name=standard_config_fee_id,json=standardConfigFeeId,proto3" json:"standard_config_fee_id,omitempty"`
	StandardExtraCostId         string        `protobuf:"bytes,96,opt,name=standard_extra_cost_id,json=standardExtraCostId,proto3" json:"standard_extra_cost_id,omitempty"`
	OperationPartner            string        `protobuf:"bytes,97,opt,name=operation_partner,json=operationPartner,proto3" json:"operation_partner,omitempty"`
	TypeOrder                   string        `protobuf:"bytes,98,opt,name=type_order,json=typeOrder,proto3" json:"type_order,omitempty"`
	TypeOrderCode               string        `protobuf:"bytes,99,opt,name=type_order_code,json=typeOrderCode,proto3" json:"type_order_code,omitempty"`
	UpdatedTime                 string        `protobuf:"bytes,100,opt,name=updated_time,json=updatedTime,proto3" json:"updated_time,omitempty"`
}

func (x *ShippingOrder) Reset() {
	*x = ShippingOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encoding_test_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShippingOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShippingOrder) ProtoMessage() {}

func (x *ShippingOrder) ProtoReflect() protoreflect.Message {
	mi := &file_encoding_test_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShippingOrder.ProtoReflect.Descriptor instead.
func (*ShippingOrder) Descriptor() ([]byte, []int) {
	return file_encoding_test_proto_rawDescGZIP(), []int{5}
}

func (x *ShippingOrder) GetXId() string {
	if x != nil {
		return x.XId
	}
	return ""
}

func (x *ShippingOrder) GetShopId() int32 {
	if x != nil {
		return x.ShopId
	}
	return 0
}

func (x *ShippingOrder) GetClientId() int32 {
	if x != nil {
		return x.ClientId
	}
	return 0
}

func (x *ShippingOrder) GetReturnName() string {
	if x != nil {
		return x.ReturnName
	}
	return ""
}

func (x *ShippingOrder) GetReturnPhone() string {
	if x != nil {
		return x.ReturnPhone
	}
	return ""
}

func (x *ShippingOrder) GetReturnAddress() string {
	if x != nil {
		return x.ReturnAddress
	}
	return ""
}

func (x *ShippingOrder) GetReturnWardCode() string {
	if x != nil {
		return x.ReturnWardCode
	}
	return ""
}

func (x *ShippingOrder) GetReturnDistrictId() int32 {
	if x != nil {
		return x.ReturnDistrictId
	}
	return 0
}

func (x *ShippingOrder) GetReturnLocation() *Location {
	if x != nil {
		return x.ReturnLocation
	}
	return nil
}

func (x *ShippingOrder) GetFromName() string {
	if x != nil {
		return x.FromName
	}
	return ""
}

func (x *ShippingOrder) GetFromPhone() string {
	if x != nil {
		return x.FromPhone
	}
	return ""
}

func (x *ShippingOrder) GetFromHotline() string {
	if x != nil {
		return x.FromHotline
	}
	return ""
}

func (x *ShippingOrder) GetFromAddress() string {
	if x != nil {
		return x.FromAddress
	}
	return ""
}

func (x *ShippingOrder) GetFromWardCode() string {
	if x != nil {
		return x.FromWardCode
	}
	return ""
}

func (x *ShippingOrder) GetFromDistrictId() int32 {
	if x != nil {
		return x.FromDistrictId
	}
	return 0
}

func (x *ShippingOrder) GetFromLocation() *Location {
	if x != nil {
		return x.FromLocation
	}
	return nil
}

func (x *ShippingOrder) GetDeliverStationId() int32 {
	if x != nil {
		return x.DeliverStationId
	}
	return 0
}

func (x *ShippingOrder) GetToName() string {
	if x != nil {
		return x.ToName
	}
	return ""
}

func (x *ShippingOrder) GetToPhone() string {
	if x != nil {
		return x.ToPhone
	}
	return ""
}

func (x *ShippingOrder) GetToAddress() string {
	if x != nil {
		return x.ToAddress
	}
	return ""
}

func (x *ShippingOrder) GetToWardCode() string {
	if x != nil {
		return x.ToWardCode
	}
	return ""
}

func (x *ShippingOrder) GetToDistrictId() int32 {
	if x != nil {
		return x.ToDistrictId
	}
	return 0
}

func (x *ShippingOrder) GetToLocation() *Location {
	if x != nil {
		return x.ToLocation
	}
	return nil
}

func (x *ShippingOrder) GetWeight() int32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *ShippingOrder) GetLength() int32 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *ShippingOrder) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *ShippingOrder) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *ShippingOrder) GetConvertedWeight() int32 {
	if x != nil {
		return x.ConvertedWeight
	}
	return 0
}

func (x *ShippingOrder) GetCalculateWeight() int32 {
	if x != nil {
		return x.CalculateWeight
	}
	return 0
}

func (x *ShippingOrder) GetImageIds() string {
	if x != nil {
		return x.ImageIds
	}
	return ""
}

func (x *ShippingOrder) GetServiceTypeId() int32 {
	if x != nil {
		return x.ServiceTypeId
	}
	return 0
}

func (x *ShippingOrder) GetServiceId() int32 {
	if x != nil {
		return x.ServiceId
	}
	return 0
}

func (x *ShippingOrder) GetPaymentTypeId() int32 {
	if x != nil {
		return x.PaymentTypeId
	}
	return 0
}

func (x *ShippingOrder) GetPaymentTypeIds() []int32 {
	if x != nil {
		return x.PaymentTypeIds
	}
	return nil
}

func (x *ShippingOrder) GetCustomServiceFee() int32 {
	if x != nil {
		return x.CustomServiceFee
	}
	return 0
}

func (x *ShippingOrder) GetSortCode() string {
	if x != nil {
		return x.SortCode
	}
	return ""
}

func (x *ShippingOrder) GetCodAmount() int32 {
	if x != nil {
		return x.CodAmount
	}
	return 0
}

func (x *ShippingOrder) GetIsCodTransferred() bool {
	if x != nil {
		return x.IsCodTransferred
	}
	return false
}

func (x *ShippingOrder) GetIsCodCollected() bool {
	if x != nil {
		return x.IsCodCollected
	}
	return false
}

func (x *ShippingOrder) GetInsuranceValue() int32 {
	if x != nil {
		return x.InsuranceValue
	}
	return 0
}

func (x *ShippingOrder) GetOrderValue() int32 {
	if x != nil {
		return x.OrderValue
	}
	return 0
}

func (x *ShippingOrder) GetPickStationId() int32 {
	if x != nil {
		return x.PickStationId
	}
	return 0
}

func (x *ShippingOrder) GetClientOrderCode() string {
	if x != nil {
		return x.ClientOrderCode
	}
	return ""
}

func (x *ShippingOrder) GetCodFailedAmount() int32 {
	if x != nil {
		return x.CodFailedAmount
	}
	return 0
}

func (x *ShippingOrder) GetCodFailedCollectDate() string {
	if x != nil {
		return x.CodFailedCollectDate
	}
	return ""
}

func (x *ShippingOrder) GetRequiredNote() string {
	if x != nil {
		return x.RequiredNote
	}
	return ""
}

func (x *ShippingOrder) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *ShippingOrder) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *ShippingOrder) GetEmployeeNote() string {
	if x != nil {
		return x.EmployeeNote
	}
	return ""
}

func (x *ShippingOrder) GetSealCode() string {
	if x != nil {
		return x.SealCode
	}
	return ""
}

func (x *ShippingOrder) GetPickupTime() string {
	if x != nil {
		return x.PickupTime
	}
	return ""
}

func (x *ShippingOrder) GetItems() []*Item {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ShippingOrder) GetCoupon() string {
	if x != nil {
		return x.Coupon
	}
	return ""
}

func (x *ShippingOrder) GetCouponCampaignId() int32 {
	if x != nil {
		return x.CouponCampaignId
	}
	return 0
}

func (x *ShippingOrder) GetOrderCode() string {
	if x != nil {
		return x.OrderCode
	}
	return ""
}

func (x *ShippingOrder) GetVersionNo() string {
	if x != nil {
		return x.VersionNo
	}
	return ""
}

func (x *ShippingOrder) GetUpdatedIp() string {
	if x != nil {
		return x.UpdatedIp
	}
	return ""
}

func (x *ShippingOrder) GetUpdatedEmployee() int32 {
	if x != nil {
		return x.UpdatedEmployee
	}
	return 0
}

func (x *ShippingOrder) GetUpdatedClient() int32 {
	if x != nil {
		return x.UpdatedClient
	}
	return 0
}

func (x *ShippingOrder) GetUpdatedSource() string {
	if x != nil {
		return x.UpdatedSource
	}
	return ""
}

func (x *ShippingOrder) GetUpdatedDate() string {
	if x != nil {
		return x.UpdatedDate
	}
	return ""
}

func (x *ShippingOrder) GetUpdatedWarehouse() int32 {
	if x != nil {
		return x.UpdatedWarehouse
	}
	return 0
}

func (x *ShippingOrder) GetCreatedIp() string {
	if x != nil {
		return x.CreatedIp
	}
	return ""
}

func (x *ShippingOrder) GetCreatedEmployee() int32 {
	if x != nil {
		return x.CreatedEmployee
	}
	return 0
}

func (x *ShippingOrder) GetCreatedClient() int32 {
	if x != nil {
		return x.CreatedClient
	}
	return 0
}

func (x *ShippingOrder) GetCreatedSource() string {
	if x != nil {
		return x.CreatedSource
	}
	return ""
}

func (x *ShippingOrder) GetCreatedDate() string {
	if x != nil {
		return x.CreatedDate
	}
	return ""
}

func (x *ShippingOrder) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ShippingOrder) GetInternalProcessStatus() string {
	if x != nil {
		return x.InternalProcessStatus
	}
	return ""
}

func (x *ShippingOrder) GetInternalProcessType() string {
	if x != nil {
		return x.InternalProcessType
	}
	return ""
}

func (x *ShippingOrder) GetPickWarehouseId() int32 {
	if x != nil {
		return x.PickWarehouseId
	}
	return 0
}

func (x *ShippingOrder) GetDeliverWarehouseId() int32 {
	if x != nil {
		return x.DeliverWarehouseId
	}
	return 0
}

func (x *ShippingOrder) GetCurrentWarehouseId() int32 {
	if x != nil {
		return x.CurrentWarehouseId
	}
	return 0
}

func (x *ShippingOrder) GetReturnWarehouseId() int32 {
	if x != nil {
		return x.ReturnWarehouseId
	}
	return 0
}

func (x *ShippingOrder) GetNextWarehouseId() int32 {
	if x != nil {
		return x.NextWarehouseId
	}
	return 0
}

func (x *ShippingOrder) GetCurrentTransportWarehouseId() int32 {
	if x != nil {
		return x.CurrentTransportWarehouseId
	}
	return 0
}

func (x *ShippingOrder) GetLeadtime() string {
	if x != nil {
		return x.Leadtime
	}
	return ""
}

func (x *ShippingOrder) GetOrderDate() string {
	if x != nil {
		return x.OrderDate
	}
	return ""
}

func (x *ShippingOrder) GetData() *Data {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ShippingOrder) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *ShippingOrder) GetSocId() string {
	if x != nil {
		return x.SocId
	}
	return ""
}

func (x *ShippingOrder) GetTag() []string {
	if x != nil {
		return x.Tag
	}
	return nil
}

func (x *ShippingOrder) GetLegacy() bool {
	if x != nil {
		return x.Legacy
	}
	return false
}

func (x *ShippingOrder) GetIsPartialReturn() bool {
	if x != nil {
		return x.IsPartialReturn
	}
	return false
}

func (x *ShippingOrder) GetIsDocumentReturn() bool {
	if x != nil {
		return x.IsDocumentReturn
	}
	return false
}

func (x *ShippingOrder) GetUpdatedDatePickShift() string {
	if x != nil {
		return x.UpdatedDatePickShift
	}
	return ""
}

func (x *ShippingOrder) GetUpdatedDateDeliverShift() string {
	if x != nil {
		return x.UpdatedDateDeliverShift
	}
	return ""
}

func (x *ShippingOrder) GetUpdatedDateReturnShift() string {
	if x != nil {
		return x.UpdatedDateReturnShift
	}
	return ""
}

func (x *ShippingOrder) GetTransactionIds() []string {
	if x != nil {
		return x.TransactionIds
	}
	return nil
}

func (x *ShippingOrder) GetTransportationStatus() string {
	if x != nil {
		return x.TransportationStatus
	}
	return ""
}

func (x *ShippingOrder) GetTransportationPhase() string {
	if x != nil {
		return x.TransportationPhase
	}
	return ""
}

func (x *ShippingOrder) GetExtraService() *ExtraService {
	if x != nil {
		return x.ExtraService
	}
	return nil
}

func (x *ShippingOrder) GetConfigFeeId() string {
	if x != nil {
		return x.ConfigFeeId
	}
	return ""
}

func (x *ShippingOrder) GetExtraCostId() string {
	if x != nil {
		return x.ExtraCostId
	}
	return ""
}

func (x *ShippingOrder) GetStandardConfigFeeId() string {
	if x != nil {
		return x.StandardConfigFeeId
	}
	return ""
}

func (x *ShippingOrder) GetStandardExtraCostId() string {
	if x != nil {
		return x.StandardExtraCostId
	}
	return ""
}

func (x *ShippingOrder) GetOperationPartner() string {
	if x != nil {
		return x.OperationPartner
	}
	return ""
}

func (x *ShippingOrder) GetTypeOrder() string {
	if x != nil {
		return x.TypeOrder
	}
	return ""
}

func (x *ShippingOrder) GetTypeOrderCode() string {
	if x != nil {
		return x.TypeOrderCode
	}
	return ""
}

func (x *ShippingOrder) GetUpdatedTime() string {
	if x != nil {
		return x.UpdatedTime
	}
	return ""
}

var File_encoding_test_proto protoreflect.FileDescriptor

var file_encoding_test_proto_rawDesc = []byte{
	0x0a, 0x13, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x5a, 0x0a, 0x0a, 0x54, 0x65, 0x73, 0x74, 0x56, 0x61, 0x72,
	0x49, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x11, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x73,
	0x74, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x74, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x74, 0x72, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x74, 0x72,
	0x32, 0x22, 0xa5, 0x01, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10,
	0x0a, 0x03, 0x6c, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6c, 0x61, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04,
	0x6c, 0x6f, 0x6e, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x65, 0x6c, 0x6c, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x74, 0x72, 0x75, 0x73, 0x74, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x74, 0x72, 0x75, 0x73, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1a, 0x0a,
	0x08, 0x77, 0x61, 0x72, 0x64, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x77, 0x61, 0x72, 0x64, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x96, 0x03, 0x0a, 0x04, 0x49, 0x74,
	0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x71, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x31, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x31, 0x12, 0x27, 0x0a, 0x0f, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x32, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x32, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x33, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x33, 0x12, 0x16, 0x0a,
	0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x77,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x49,
	0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x74,
	0x65, 0x6d, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x74, 0x65, 0x6d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x22, 0x63, 0x0a, 0x0c, 0x45, 0x78, 0x74, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x12, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x46, 0x6c, 0x61, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x64, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x22, 0xe1, 0x01, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x41, 0x0a, 0x1d, 0x61, 0x68, 0x61, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x73, 0x65, 0x6c, 0x6c,
	0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x61, 0x68, 0x61, 0x6d, 0x6f, 0x76, 0x65,
	0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x12, 0x47, 0x0a, 0x20, 0x61, 0x68, 0x61, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x72,
	0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1d, 0x61,
	0x68, 0x61, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1f, 0x0a, 0x0b,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x2c, 0x0a,
	0x12, 0x61, 0x68, 0x61, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x68, 0x61, 0x6d, 0x6f,
	0x76, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xe6, 0x1d, 0x0a, 0x0d,
	0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x0f, 0x0a,
	0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x73, 0x68, 0x6f, 0x70, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x28, 0x0a, 0x10, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x57, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x44, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x0f, 0x72, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x09, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x72, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x66,
	0x72, 0x6f, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x66, 0x72, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d,
	0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x72,
	0x6f, 0x6d, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x5f,
	0x68, 0x6f, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66,
	0x72, 0x6f, 0x6d, 0x48, 0x6f, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x72,
	0x6f, 0x6d, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x24, 0x0a,
	0x0e, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x57, 0x61, 0x72, 0x64, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x64, 0x69, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x66,
	0x72, 0x6f, 0x6d, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a,
	0x0d, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a,
	0x12, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x64, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74,
	0x6f, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6f,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x6f, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x6f, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x20,
	0x0a, 0x0c, 0x74, 0x6f, 0x5f, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x6f, 0x57, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x24, 0x0a, 0x0e, 0x74, 0x6f, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x6f, 0x44, 0x69, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x0b, 0x74, 0x6f, 0x5f, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x74, 0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x77, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x74, 0x65, 0x64, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x63,
	0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65,
	0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x49, 0x64, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x21, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x22, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0e, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x73, 0x12, 0x2c, 0x0a, 0x12,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x66,
	0x65, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x46, 0x65, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6f,
	0x72, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73,
	0x6f, 0x72, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x64, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x25, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x6f, 0x64,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x64,
	0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x18, 0x26, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x43, 0x6f, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x72, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x5f, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x27, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x69, 0x73, 0x43, 0x6f, 0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x27,
	0x0a, 0x0f, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e,
	0x63, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x69, 0x63, 0x6b,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x2a, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x70, 0x69, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x11,
	0x63, 0x6f, 0x64, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x46, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x17, 0x63, 0x6f, 0x64, 0x5f,
	0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x63, 0x6f, 0x64, 0x46, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x6e, 0x6f, 0x74, 0x65,
	0x18, 0x2e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x4e, 0x6f, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18,
	0x2f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x30, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f,
	0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x5f, 0x6e,
	0x6f, 0x74, 0x65, 0x18, 0x31, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x6d, 0x70, 0x6c, 0x6f,
	0x79, 0x65, 0x65, 0x4e, 0x6f, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x61, 0x6c, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x61, 0x6c,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x69, 0x63, 0x6b, 0x75,
	0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x34,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x18, 0x35, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6f,
	0x75, 0x70, 0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x36, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x43, 0x61,
	0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x37, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x18, 0x38, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x69, 0x70, 0x18, 0x39, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x49, 0x70, 0x12, 0x29, 0x0a, 0x10, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65,
	0x12, 0x25, 0x0a, 0x0e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x3d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x2b, 0x0a, 0x11, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x77, 0x61, 0x72,
	0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x70, 0x18, 0x3f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x49, 0x70, 0x12, 0x29, 0x0a,
	0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65,
	0x65, 0x18, 0x40, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x41, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12,
	0x25, 0x0a, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x42, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x43, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x44, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x36, 0x0a, 0x17, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x45, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x15, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a,
	0x11, 0x70, 0x69, 0x63, 0x6b, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x47, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x70, 0x69, 0x63, 0x6b, 0x57, 0x61,
	0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x48, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x49, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x49, 0x64, 0x12, 0x2e, 0x0a,
	0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x72, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x49, 0x64, 0x12, 0x2a, 0x0a,
	0x11, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x57, 0x61,
	0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x1e, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x77,
	0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x4c, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x1b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x6c, 0x65, 0x61, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6c, 0x65, 0x61, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x4e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x4f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x50,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x06,
	0x73, 0x6f, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x51, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x6f,
	0x63, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x52, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x18,
	0x53, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x12, 0x2a, 0x0a,
	0x11, 0x69, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x18, 0x54, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x61, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x73, 0x5f,
	0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x18,
	0x55, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x12, 0x35, 0x0a, 0x17, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x69, 0x63, 0x6b, 0x5f, 0x73, 0x68, 0x69,
	0x66, 0x74, 0x18, 0x56, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x44, 0x61, 0x74, 0x65, 0x50, 0x69, 0x63, 0x6b, 0x53, 0x68, 0x69, 0x66, 0x74, 0x12, 0x3b,
	0x0a, 0x1a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x64,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x68, 0x69, 0x66, 0x74, 0x18, 0x57, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x17, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x44,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x53, 0x68, 0x69, 0x66, 0x74, 0x12, 0x39, 0x0a, 0x19, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x5f, 0x73, 0x68, 0x69, 0x66, 0x74, 0x18, 0x58, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x52, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x53, 0x68, 0x69, 0x66, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x59, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x12,
	0x33, 0x0a, 0x15, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x5b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x0d, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x5c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x0c, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x5d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x65, 0x65, 0x49, 0x64, 0x12,
	0x22, 0x0a, 0x0d, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x5e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x74, 0x72, 0x61, 0x43, 0x6f, 0x73,
	0x74, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x5f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x46, 0x65, 0x65, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x60, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61,
	0x72, 0x64, 0x45, 0x78, 0x74, 0x72, 0x61, 0x43, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x12, 0x2b, 0x0a,
	0x11, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x18, 0x61, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x62, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x74, 0x79, 0x70, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x63, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x74, 0x79, 0x70, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x42, 0x24, 0x5a, 0x22, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x70, 0x68, 0x74, 0x68, 0x61, 0x6f, 0x63, 0x73, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_encoding_test_proto_rawDescOnce sync.Once
	file_encoding_test_proto_rawDescData = file_encoding_test_proto_rawDesc
)

func file_encoding_test_proto_rawDescGZIP() []byte {
	file_encoding_test_proto_rawDescOnce.Do(func() {
		file_encoding_test_proto_rawDescData = protoimpl.X.CompressGZIP(file_encoding_test_proto_rawDescData)
	})
	return file_encoding_test_proto_rawDescData
}

var file_encoding_test_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_encoding_test_proto_goTypes = []any{
	(*TestVarInt)(nil),    // 0: TestVarInt
	(*Location)(nil),      // 1: Location
	(*Item)(nil),          // 2: Item
	(*ExtraService)(nil),  // 3: ExtraService
	(*Data)(nil),          // 4: Data
	(*ShippingOrder)(nil), // 5: ShippingOrder
}
var file_encoding_test_proto_depIdxs = []int32{
	1, // 0: ShippingOrder.return_location:type_name -> Location
	1, // 1: ShippingOrder.from_location:type_name -> Location
	1, // 2: ShippingOrder.to_location:type_name -> Location
	2, // 3: ShippingOrder.items:type_name -> Item
	4, // 4: ShippingOrder.data:type_name -> Data
	3, // 5: ShippingOrder.extra_service:type_name -> ExtraService
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_encoding_test_proto_init() }
func file_encoding_test_proto_init() {
	if File_encoding_test_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_encoding_test_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*TestVarInt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encoding_test_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*Location); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encoding_test_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encoding_test_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*ExtraService); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encoding_test_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encoding_test_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*ShippingOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_encoding_test_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_encoding_test_proto_goTypes,
		DependencyIndexes: file_encoding_test_proto_depIdxs,
		MessageInfos:      file_encoding_test_proto_msgTypes,
	}.Build()
	File_encoding_test_proto = out.File
	file_encoding_test_proto_rawDesc = nil
	file_encoding_test_proto_goTypes = nil
	file_encoding_test_proto_depIdxs = nil
}
